{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\E072894\\\\Documents\\\\repos\\\\nodejs\\\\nextjs_repos\\\\ssr_refresh_token\\\\web\\\\lib\\\\apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\nimport jwtDecode from 'jwt-decode';\nimport { getAccessToken, setAccessToken } from './accessToken';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport cookie from 'cookie'; // one way to check if we are on the server or not, is to check the window.\n\nvar isServer = function isServer() {\n  return false;\n};\n/**\r\n * Creates and provides the apolloContext\r\n * to a next.js PageTree. Use it by wrapping\r\n * your PageComponent via HOC pattern.\r\n * @param {Function|Class} PageComponent\r\n * @param {Object} [config]\r\n * @param {Boolean} [config.ssr=true]\r\n */\n\n\nexport function withApollo(PageComponent) {\n  var _this = this;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(PageComponent, _extends({}, pageProps, {\n      apolloClient: client,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 12\n      }\n    }));\n  };\n\n  if (true) {\n    // Find correct display name\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component'; // Warn if old way of installing apollo is used\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var AppTree, _ctx$ctx, req, res, serverAccessToken, cookies, data, apolloClient, pageProps, _await$import, getDataFromTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res;\n              serverAccessToken = '';\n\n              if (!isServer()) {\n                _context.next = 9;\n                break;\n              }\n\n              cookies = cookie.parse(req.headers.cookie);\n\n              if (!cookies.jid) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(fetch('http://localhost:4000/refresh_token', {\n                method: 'post',\n                credentials: 'include',\n                headers: {\n                  cookie: \"jid=\".concat(cookies.jid)\n                }\n              }).then(function (res) {\n                return res.json();\n              }));\n\n            case 7:\n              data = _context.sent;\n              serverAccessToken = data.accessToken;\n\n            case 9:\n              // Run all GraphQL queries in the component tree\n              // and extract the resulting data\n              apolloClient = ctx.ctx.apolloClient = initApolloClient({}, serverAccessToken);\n\n              if (!PageComponent.getInitialProps) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 13:\n              _context.t0 = _context.sent;\n              _context.next = 17;\n              break;\n\n            case 16:\n              _context.t0 = {};\n\n            case 17:\n              pageProps = _context.t0;\n\n              if (!false) {\n                _context.next = 35;\n                break;\n              }\n\n              if (!(res && res.finished)) {\n                _context.next = 21;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {});\n\n            case 21:\n              if (!ssr) {\n                _context.next = 34;\n                break;\n              }\n\n              _context.prev = 22;\n              _context.next = 25;\n              return _regeneratorRuntime.awrap(import('@apollo/react-ssr'));\n\n            case 25:\n              _await$import = _context.sent;\n              getDataFromTree = _await$import.getDataFromTree;\n              _context.next = 29;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                }),\n                apolloClient: apolloClient,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 15\n                }\n              })));\n\n            case 29:\n              _context.next = 34;\n              break;\n\n            case 31:\n              _context.prev = 31;\n              _context.t1 = _context[\"catch\"](22);\n              // Prevent Apollo Client GraphQL errors from crashing SSR.\n              // Handle them in components via the data.error prop:\n              // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n              console.error('Error while running `getDataFromTree`', _context.t1);\n\n            case 34:\n              // getDataFromTree does not call componentWillUnmount\n              // head side effect therefore need to be cleared manually\n              Head.rewind();\n\n            case 35:\n              // Extract query data from the Apollo store\n              apolloState = apolloClient.cache.extract(); // Everything that is return here, is going to be sent to the browser\n\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                apolloState: apolloState,\n                serverAccessToken: serverAccessToken\n              }));\n\n            case 37:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[22, 31]], Promise);\n    };\n  }\n\n  return WithApollo;\n}\nvar apolloClient = null;\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n */\n\nfunction initApolloClient(initState, serverAccessToken) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n/**\r\n * Creates and configures the ApolloClient\r\n * @param  {Object} [initialState={}]\r\n * @param  {Object} config\r\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var serverAccessToken = arguments.length > 1 ? arguments[1] : undefined;\n  var httpLink = new HttpLink({\n    uri: 'http://localhost:4000/graphql',\n    credentials: 'include',\n    fetch: fetch\n  });\n  var refreshLink = new TokenRefreshLink({\n    accessTokenField: 'accessToken',\n    isTokenValidOrUndefined: function isTokenValidOrUndefined() {\n      var token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        var _jwtDecode = jwtDecode(token),\n            exp = _jwtDecode.exp;\n\n        if (Date.now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch (_unused) {\n        return false;\n      }\n    },\n    fetchAccessToken: function fetchAccessToken() {\n      return fetch('http://localhost:4000/refresh_token', {\n        method: 'POST',\n        credentials: 'include'\n      });\n    },\n    handleFetch: function handleFetch(accessToken) {\n      setAccessToken(accessToken);\n    },\n    handleError: function handleError(err) {\n      console.warn('Your refresh token is invalid. Try to relogin');\n      console.error(err);\n    }\n  });\n  var authLink = setContext(function (_request, _ref3) {\n    var headers = _ref3.headers;\n    var token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? \"bearer \".concat(token) : ''\n      })\n    };\n  });\n  var errorLink = onError(function (_ref4) {\n    var graphQLErrors = _ref4.graphQLErrors,\n        networkError = _ref4.networkError;\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([refreshLink, authLink, errorLink, httpLink]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["C:/Users/E072894/Documents/repos/nodejs/nextjs_repos/ssr_refresh_token/web/lib/apollo.tsx"],"names":["React","Head","ApolloClient","InMemoryCache","HttpLink","setContext","fetch","TokenRefreshLink","jwtDecode","getAccessToken","setAccessToken","onError","ApolloLink","cookie","isServer","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","res","serverAccessToken","cookies","parse","headers","jid","method","credentials","then","json","data","accessToken","finished","getDataFromTree","error","rewind","cache","extract","initState","createApolloClient","initialState","httpLink","uri","refreshLink","accessTokenField","isTokenValidOrUndefined","token","exp","Date","now","fetchAccessToken","handleFetch","handleError","err","authLink","_request","authorization","errorLink","graphQLErrors","networkError","log","ssrMode","link","from","restore"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Head from 'next/head'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory'\r\nimport { HttpLink } from 'apollo-link-http'\r\nimport { setContext } from 'apollo-link-context'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport { TokenRefreshLink } from 'apollo-link-token-refresh'\r\nimport jwtDecode from 'jwt-decode'\r\nimport { getAccessToken, setAccessToken } from './accessToken'\r\nimport { onError } from 'apollo-link-error'\r\nimport { ApolloLink } from 'apollo-link'\r\nimport cookie from 'cookie'\r\n\r\n// one way to check if we are on the server or not, is to check the window.\r\nconst isServer = () => typeof window === 'undefined'\r\n\r\n/**\r\n * Creates and provides the apolloContext\r\n * to a next.js PageTree. Use it by wrapping\r\n * your PageComponent via HOC pattern.\r\n * @param {Function|Class} PageComponent\r\n * @param {Object} [config]\r\n * @param {Boolean} [config.ssr=true]\r\n */\r\nexport function withApollo(PageComponent: any, { ssr = true } = {}) {\r\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }: any) => {\r\n    const client = apolloClient || initApolloClient(apolloState)\r\n    return <PageComponent {...pageProps} apolloClient={client} />\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // Find correct display name\r\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component'\r\n\r\n    // Warn if old way of installing apollo is used\r\n    if (displayName === 'App') {\r\n      console.warn('This withApollo HOC only works with PageComponents.')\r\n    }\r\n\r\n    // Set correct display name for devtools\r\n    WithApollo.displayName = `withApollo(${displayName})`\r\n  }\r\n\r\n  if (ssr || PageComponent.getInitialProps) {\r\n    WithApollo.getInitialProps = async (ctx: any) => {\r\n      const {\r\n        AppTree,\r\n        ctx: { req, res },\r\n      } = ctx\r\n\r\n      let serverAccessToken = ''\r\n\r\n      if (isServer()) {\r\n        const cookies = cookie.parse(req.headers.cookie)\r\n        if (cookies.jid) {\r\n          const data = await fetch('http://localhost:4000/refresh_token', {\r\n            method: 'post',\r\n            credentials: 'include',\r\n            headers: {\r\n              cookie: `jid=${cookies.jid}`,\r\n            },\r\n          }).then((res) => res.json())\r\n\r\n          serverAccessToken = data.accessToken\r\n        }\r\n      }\r\n\r\n      // Run all GraphQL queries in the component tree\r\n      // and extract the resulting data\r\n      const apolloClient = (ctx.ctx.apolloClient = initApolloClient({}, serverAccessToken))\r\n\r\n      const pageProps = PageComponent.getInitialProps\r\n        ? await PageComponent.getInitialProps(ctx)\r\n        : {}\r\n\r\n      // Only on the server\r\n      if (typeof window === 'undefined') {\r\n        // When redirecting, the response is finished.\r\n        // No point in continuing to render\r\n        if (res && res.finished) {\r\n          return {}\r\n        }\r\n\r\n        if (ssr) {\r\n          try {\r\n            // Run all GraphQL queries\r\n            const { getDataFromTree } = await import('@apollo/react-ssr')\r\n            await getDataFromTree(\r\n              <AppTree\r\n                pageProps={{\r\n                  ...pageProps,\r\n                  apolloClient,\r\n                }}\r\n                apolloClient={apolloClient}\r\n              />\r\n            )\r\n          } catch (error) {\r\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n            // Handle them in components via the data.error prop:\r\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n            console.error('Error while running `getDataFromTree`', error)\r\n          }\r\n        }\r\n\r\n        // getDataFromTree does not call componentWillUnmount\r\n        // head side effect therefore need to be cleared manually\r\n        Head.rewind()\r\n      }\r\n\r\n      // Extract query data from the Apollo store\r\n      const apolloState = apolloClient.cache.extract()\r\n\r\n      // Everything that is return here, is going to be sent to the browser\r\n      return {\r\n        ...pageProps,\r\n        apolloState,\r\n        serverAccessToken\r\n      }\r\n    }\r\n  }\r\n\r\n  return WithApollo\r\n}\r\n\r\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null\r\n\r\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n */\r\nfunction initApolloClient(initState: any, serverAccessToken?: string) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (isServer()) {\r\n    return createApolloClient(initState, serverAccessToken)\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!apolloClient) {\r\n    // setAccessToken(cookie.parse(document.cookie).test);\r\n    apolloClient = createApolloClient(initState)\r\n  }\r\n\r\n  return apolloClient\r\n}\r\n\r\n/**\r\n * Creates and configures the ApolloClient\r\n * @param  {Object} [initialState={}]\r\n * @param  {Object} config\r\n */\r\nfunction createApolloClient(initialState = {}, serverAccessToken?: string) {\r\n  const httpLink = new HttpLink({\r\n    uri: 'http://localhost:4000/graphql',\r\n    credentials: 'include',\r\n    fetch,\r\n  })\r\n\r\n  const refreshLink = new TokenRefreshLink({\r\n    accessTokenField: 'accessToken',\r\n    isTokenValidOrUndefined: () => {\r\n      const token = getAccessToken()\r\n\r\n      if (!token) {\r\n        return true\r\n      }\r\n\r\n      try {\r\n        const { exp } = jwtDecode(token)\r\n        if (Date.now() >= exp * 1000) {\r\n          return false\r\n        } else {\r\n          return true\r\n        }\r\n      } catch {\r\n        return false\r\n      }\r\n    },\r\n    fetchAccessToken: () => {\r\n      return fetch('http://localhost:4000/refresh_token', {\r\n        method: 'POST',\r\n        credentials: 'include',\r\n      })\r\n    },\r\n    handleFetch: (accessToken) => {\r\n      setAccessToken(accessToken)\r\n    },\r\n    handleError: (err) => {\r\n      console.warn('Your refresh token is invalid. Try to relogin')\r\n      console.error(err)\r\n    },\r\n  })\r\n\r\n  const authLink = setContext((_request, { headers }) => {\r\n    const token = isServer() ? serverAccessToken : getAccessToken()\r\n    return {\r\n      headers: {\r\n        ...headers,\r\n        authorization: token ? `bearer ${token}` : '',\r\n      },\r\n    }\r\n  })\r\n\r\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\r\n    console.log(graphQLErrors)\r\n    console.log(networkError)\r\n  })\r\n\r\n  return new ApolloClient({\r\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\r\n    link: ApolloLink.from([refreshLink, authLink, errorLink, httpLink]),\r\n    cache: new InMemoryCache().restore(initialState),\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}