{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\E072894\\\\Documents\\\\repos\\\\nodejs\\\\nextjs_repos\\\\ssr_refresh_token\\\\web\\\\lib\\\\apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\nimport jwtDecode from 'jwt-decode';\nimport { getAccessToken, setAccessToken } from './accessToken';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link'; // one way to check if we are on the server or not, is to check the window.\n\nconst isServer = () => true;\n/**\r\n * Creates and provides the apolloContext\r\n * to a next.js PageTree. Use it by wrapping\r\n * your PageComponent via HOC pattern.\r\n * @param {Function|Class} PageComponent\r\n * @param {Object} [config]\r\n * @param {Boolean} [config.ssr=true]\r\n */\n\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(PageComponent, _extends({}, pageProps, {\n      apolloClient: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 12\n      }\n    }));\n  };\n\n  if (true) {\n    // Find correct display name\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component'; // Warn if old way of installing apollo is used\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree,\n        ctx: {\n          req,\n          res\n        }\n      } = ctx;\n\n      if (req) {} // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n\n      const apolloClient = ctx.ctx.apolloClient = initApolloClient({});\n      const pageProps = PageComponent.getInitialProps ? await PageComponent.getInitialProps(ctx) : {}; // Only on the server\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              }),\n              apolloClient: apolloClient,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 15\n              }\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\nlet apolloClient = null;\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n */\n\nfunction initApolloClient(initState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n/**\r\n * Creates and configures the ApolloClient\r\n * @param  {Object} [initialState={}]\r\n * @param  {Object} config\r\n */\n\n\nfunction createApolloClient(initialState = {}) {\n  const httpLink = new HttpLink({\n    uri: 'http://localhost:4000/graphql',\n    credentials: 'include',\n    fetch\n  });\n  const refreshLink = new TokenRefreshLink({\n    accessTokenField: 'accessToken',\n    isTokenValidOrUndefined: () => {\n      const token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        const {\n          exp\n        } = jwtDecode(token);\n\n        if (Date.now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch {\n        return false;\n      }\n    },\n    fetchAccessToken: () => {\n      return fetch('http://localhost:4000/refresh_token', {\n        method: 'POST',\n        credentials: 'include'\n      });\n    },\n    handleFetch: accessToken => {\n      setAccessToken(accessToken);\n    },\n    handleError: err => {\n      console.warn('Your refresh token is invalid. Try to relogin');\n      console.error(err);\n    }\n  });\n  const authLink = setContext((_request, {\n    headers\n  }) => {\n    const token = getAccessToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? `bearer ${token}` : ''\n      })\n    };\n  });\n  const errorLink = onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n  return new ApolloClient({\n    ssrMode: true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([refreshLink, authLink, errorLink, httpLink]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["C:/Users/E072894/Documents/repos/nodejs/nextjs_repos/ssr_refresh_token/web/lib/apollo.tsx"],"names":["React","Head","ApolloClient","InMemoryCache","HttpLink","setContext","fetch","TokenRefreshLink","jwtDecode","getAccessToken","setAccessToken","onError","ApolloLink","isServer","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","res","finished","getDataFromTree","error","rewind","cache","extract","initState","createApolloClient","initialState","httpLink","uri","credentials","refreshLink","accessTokenField","isTokenValidOrUndefined","token","exp","Date","now","fetchAccessToken","method","handleFetch","accessToken","handleError","err","authLink","_request","headers","authorization","errorLink","graphQLErrors","networkError","log","ssrMode","link","from","restore"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Head from 'next/head'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory'\r\nimport { HttpLink } from 'apollo-link-http'\r\nimport { setContext } from 'apollo-link-context'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport { TokenRefreshLink } from 'apollo-link-token-refresh'\r\nimport jwtDecode from 'jwt-decode'\r\nimport { getAccessToken, setAccessToken } from './accessToken'\r\nimport { onError } from 'apollo-link-error'\r\nimport { ApolloLink } from 'apollo-link'\r\n\r\n// one way to check if we are on the server or not, is to check the window.\r\nconst isServer = () => typeof window === 'undefined'\r\n\r\n/**\r\n * Creates and provides the apolloContext\r\n * to a next.js PageTree. Use it by wrapping\r\n * your PageComponent via HOC pattern.\r\n * @param {Function|Class} PageComponent\r\n * @param {Object} [config]\r\n * @param {Boolean} [config.ssr=true]\r\n */\r\nexport function withApollo(PageComponent: any, { ssr = true } = {}) {\r\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }: any) => {\r\n    const client = apolloClient || initApolloClient(apolloState)\r\n    return <PageComponent {...pageProps} apolloClient={client} />\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // Find correct display name\r\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component'\r\n\r\n    // Warn if old way of installing apollo is used\r\n    if (displayName === 'App') {\r\n      console.warn('This withApollo HOC only works with PageComponents.')\r\n    }\r\n\r\n    // Set correct display name for devtools\r\n    WithApollo.displayName = `withApollo(${displayName})`\r\n  }\r\n\r\n  if (ssr || PageComponent.getInitialProps) {\r\n    WithApollo.getInitialProps = async (ctx: any) => {\r\n      const {\r\n        AppTree,\r\n        ctx: { req, res },\r\n      } = ctx\r\n\r\n      if (req) {\r\n      }\r\n\r\n      // Run all GraphQL queries in the component tree\r\n      // and extract the resulting data\r\n      const apolloClient = (ctx.ctx.apolloClient = initApolloClient({}))\r\n\r\n      const pageProps = PageComponent.getInitialProps\r\n        ? await PageComponent.getInitialProps(ctx)\r\n        : {}\r\n\r\n      // Only on the server\r\n      if (typeof window === 'undefined') {\r\n        // When redirecting, the response is finished.\r\n        // No point in continuing to render\r\n        if (res && res.finished) {\r\n          return {}\r\n        }\r\n\r\n        if (ssr) {\r\n          try {\r\n            // Run all GraphQL queries\r\n            const { getDataFromTree } = await import('@apollo/react-ssr')\r\n            await getDataFromTree(\r\n              <AppTree\r\n                pageProps={{\r\n                  ...pageProps,\r\n                  apolloClient,\r\n                }}\r\n                apolloClient={apolloClient}\r\n              />\r\n            )\r\n          } catch (error) {\r\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n            // Handle them in components via the data.error prop:\r\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n            console.error('Error while running `getDataFromTree`', error)\r\n          }\r\n        }\r\n\r\n        // getDataFromTree does not call componentWillUnmount\r\n        // head side effect therefore need to be cleared manually\r\n        Head.rewind()\r\n      }\r\n\r\n      // Extract query data from the Apollo store\r\n      const apolloState = apolloClient.cache.extract()\r\n\r\n      return {\r\n        ...pageProps,\r\n        apolloState,\r\n      }\r\n    }\r\n  }\r\n\r\n  return WithApollo\r\n}\r\n\r\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null\r\n\r\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n */\r\nfunction initApolloClient(initState: any) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (typeof window === 'undefined') {\r\n    return createApolloClient(initState)\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!apolloClient) {\r\n    // setAccessToken(cookie.parse(document.cookie).test);\r\n    apolloClient = createApolloClient(initState)\r\n  }\r\n\r\n  return apolloClient\r\n}\r\n\r\n/**\r\n * Creates and configures the ApolloClient\r\n * @param  {Object} [initialState={}]\r\n * @param  {Object} config\r\n */\r\nfunction createApolloClient(initialState = {}) {\r\n  const httpLink = new HttpLink({\r\n    uri: 'http://localhost:4000/graphql',\r\n    credentials: 'include',\r\n    fetch,\r\n  })\r\n\r\n  const refreshLink = new TokenRefreshLink({\r\n    accessTokenField: 'accessToken',\r\n    isTokenValidOrUndefined: () => {\r\n      const token = getAccessToken()\r\n\r\n      if (!token) {\r\n        return true\r\n      }\r\n\r\n      try {\r\n        const { exp } = jwtDecode(token)\r\n        if (Date.now() >= exp * 1000) {\r\n          return false\r\n        } else {\r\n          return true\r\n        }\r\n      } catch {\r\n        return false\r\n      }\r\n    },\r\n    fetchAccessToken: () => {\r\n      return fetch('http://localhost:4000/refresh_token', {\r\n        method: 'POST',\r\n        credentials: 'include',\r\n      })\r\n    },\r\n    handleFetch: (accessToken) => {\r\n      setAccessToken(accessToken)\r\n    },\r\n    handleError: (err) => {\r\n      console.warn('Your refresh token is invalid. Try to relogin')\r\n      console.error(err)\r\n    },\r\n  })\r\n\r\n  const authLink = setContext((_request, { headers }) => {\r\n    const token = getAccessToken()\r\n    return {\r\n      headers: {\r\n        ...headers,\r\n        authorization: token ? `bearer ${token}` : '',\r\n      },\r\n    }\r\n  })\r\n\r\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\r\n    console.log(graphQLErrors)\r\n    console.log(networkError)\r\n  })\r\n\r\n  return new ApolloClient({\r\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\r\n    link: ApolloLink.from([refreshLink, authLink, errorLink, httpLink]),\r\n    cache: new InMemoryCache().restore(initialState),\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}