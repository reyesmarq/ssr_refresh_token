{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.c0994a702fb267b824ed.hot-update.js","sources":["webpack:///C:/Users/E072894/node_modules/cookie/index.js","webpack:///./lib/apollo.tsx"],"sourcesContent":["/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\nvar pairSplitRegExp = /; */;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var pairs = str.split(pairSplitRegExp);\n  var dec = opt.decode || decode;\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var eq_idx = pair.indexOf('=');\n\n    // skip things that don't look like key=value\n    if (eq_idx < 0) {\n      continue;\n    }\n\n    var key = pair.substr(0, eq_idx).trim()\n    var val = pair.substr(++eq_idx, pair.length).trim();\n\n    // quoted values\n    if ('\"' == val[0]) {\n      val = val.slice(1, -1);\n    }\n\n    // only assign once\n    if (undefined == obj[key]) {\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n","import React from 'react'\r\nimport Head from 'next/head'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory'\r\nimport { HttpLink } from 'apollo-link-http'\r\nimport { setContext } from 'apollo-link-context'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport { TokenRefreshLink } from 'apollo-link-token-refresh'\r\nimport jwtDecode from 'jwt-decode'\r\nimport { getAccessToken, setAccessToken } from './accessToken'\r\nimport { onError } from 'apollo-link-error'\r\nimport { ApolloLink } from 'apollo-link'\r\nimport cookie from 'cookie'\r\n\r\n// one way to check if we are on the server or not, is to check the window.\r\nconst isServer = () => typeof window === 'undefined'\r\n\r\n/**\r\n * Creates and provides the apolloContext\r\n * to a next.js PageTree. Use it by wrapping\r\n * your PageComponent via HOC pattern.\r\n * @param {Function|Class} PageComponent\r\n * @param {Object} [config]\r\n * @param {Boolean} [config.ssr=true]\r\n */\r\nexport function withApollo(PageComponent: any, { ssr = true } = {}) {\r\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }: any) => {\r\n    const client = apolloClient || initApolloClient(apolloState)\r\n    return <PageComponent {...pageProps} apolloClient={client} />\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // Find correct display name\r\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component'\r\n\r\n    // Warn if old way of installing apollo is used\r\n    if (displayName === 'App') {\r\n      console.warn('This withApollo HOC only works with PageComponents.')\r\n    }\r\n\r\n    // Set correct display name for devtools\r\n    WithApollo.displayName = `withApollo(${displayName})`\r\n  }\r\n\r\n  if (ssr || PageComponent.getInitialProps) {\r\n    WithApollo.getInitialProps = async (ctx: any) => {\r\n      const {\r\n        AppTree,\r\n        ctx: { req, res },\r\n      } = ctx\r\n\r\n      if (isServer()) {\r\n        const cookies = cookie.parse(req.headers.cookie)\r\n      }\r\n\r\n      // Run all GraphQL queries in the component tree\r\n      // and extract the resulting data\r\n      const apolloClient = (ctx.ctx.apolloClient = initApolloClient({}))\r\n\r\n      const pageProps = PageComponent.getInitialProps\r\n        ? await PageComponent.getInitialProps(ctx)\r\n        : {}\r\n\r\n      // Only on the server\r\n      if (typeof window === 'undefined') {\r\n        // When redirecting, the response is finished.\r\n        // No point in continuing to render\r\n        if (res && res.finished) {\r\n          return {}\r\n        }\r\n\r\n        if (ssr) {\r\n          try {\r\n            // Run all GraphQL queries\r\n            const { getDataFromTree } = await import('@apollo/react-ssr')\r\n            await getDataFromTree(\r\n              <AppTree\r\n                pageProps={{\r\n                  ...pageProps,\r\n                  apolloClient,\r\n                }}\r\n                apolloClient={apolloClient}\r\n              />\r\n            )\r\n          } catch (error) {\r\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n            // Handle them in components via the data.error prop:\r\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n            console.error('Error while running `getDataFromTree`', error)\r\n          }\r\n        }\r\n\r\n        // getDataFromTree does not call componentWillUnmount\r\n        // head side effect therefore need to be cleared manually\r\n        Head.rewind()\r\n      }\r\n\r\n      // Extract query data from the Apollo store\r\n      const apolloState = apolloClient.cache.extract()\r\n\r\n      return {\r\n        ...pageProps,\r\n        apolloState,\r\n      }\r\n    }\r\n  }\r\n\r\n  return WithApollo\r\n}\r\n\r\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null\r\n\r\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n */\r\nfunction initApolloClient(initState: any) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (typeof window === 'undefined') {\r\n    return createApolloClient(initState)\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!apolloClient) {\r\n    // setAccessToken(cookie.parse(document.cookie).test);\r\n    apolloClient = createApolloClient(initState)\r\n  }\r\n\r\n  return apolloClient\r\n}\r\n\r\n/**\r\n * Creates and configures the ApolloClient\r\n * @param  {Object} [initialState={}]\r\n * @param  {Object} config\r\n */\r\nfunction createApolloClient(initialState = {}) {\r\n  const httpLink = new HttpLink({\r\n    uri: 'http://localhost:4000/graphql',\r\n    credentials: 'include',\r\n    fetch,\r\n  })\r\n\r\n  const refreshLink = new TokenRefreshLink({\r\n    accessTokenField: 'accessToken',\r\n    isTokenValidOrUndefined: () => {\r\n      const token = getAccessToken()\r\n\r\n      if (!token) {\r\n        return true\r\n      }\r\n\r\n      try {\r\n        const { exp } = jwtDecode(token)\r\n        if (Date.now() >= exp * 1000) {\r\n          return false\r\n        } else {\r\n          return true\r\n        }\r\n      } catch {\r\n        return false\r\n      }\r\n    },\r\n    fetchAccessToken: () => {\r\n      return fetch('http://localhost:4000/refresh_token', {\r\n        method: 'POST',\r\n        credentials: 'include',\r\n      })\r\n    },\r\n    handleFetch: (accessToken) => {\r\n      setAccessToken(accessToken)\r\n    },\r\n    handleError: (err) => {\r\n      console.warn('Your refresh token is invalid. Try to relogin')\r\n      console.error(err)\r\n    },\r\n  })\r\n\r\n  const authLink = setContext((_request, { headers }) => {\r\n    const token = getAccessToken()\r\n    return {\r\n      headers: {\r\n        ...headers,\r\n        authorization: token ? `bearer ${token}` : '',\r\n      },\r\n    }\r\n  })\r\n\r\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\r\n    console.log(graphQLErrors)\r\n    console.log(networkError)\r\n  })\r\n\r\n  return new ApolloClient({\r\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\r\n    link: ApolloLink.from([refreshLink, authLink, errorLink, httpLink]),\r\n    cache: new InMemoryCache().restore(initialState),\r\n  })\r\n}\r\n"],"mappingsrMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;;;;;;;;;;AAQA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAbA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAcA;AACA;AAfA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AA6BA;AA7BA;AAAA;AAgCA;AAEA;AAFA;AAIA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAhCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAwCA;AACA;AACA;AACA;AACA;AA5CA;AA+CA;AACA;AACA;AACA;AAlDA;AAoDA;AACA;AArDA;AAyDA;AAzDA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4DA;AACA;AACA;AACA;AAEA;AAEA;;;;;AAIA;AACA;AACA;AACA,eAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;AAmCA;AAAA;AACA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAHA;AAKA;;;;A","sourceRoot":""}